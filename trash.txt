[person,man,woman,human_face,musical_instrument,sports_equipment,sports,skateboard,glasses,bicycle,motorcycle,car,truck,boat,parachute,airplane,bench,chair,sofa,building,umbrella,wine_glass,cup,dessert,cell_phone,television,laptop_computer,book,cat,dog,horse,bird,flower,tree]

musical_instrument(musical)
wine_glass(wineglass)
cell_phone(cellphone)
laptop_computer(laptop)
human_face.png (humanface.png)

black,blue,brown,green,grey,orange,pink,purple,red,white,yellow



function dropPalette(ev) {
    ev.preventDefault();
    // var data = ev.dataTransfer.getData("text");
    // const clone = document.getElementById(data);
    var palette = draggedItem;
    if (!draggedItem.hasAttribute("copied")){
        palette = draggedItem.cloneNode(true);
    }
    if (palette.className!="dragbox"){
        return;
    }
    palette.style.position = 'absolute';
    whiteboard.appendChild(palette);
    //palette.size wont update until append  
    // palette.style.left = `${ev.clientX-palette.clientWidth/2}px`;
    // palette.style.top = `${ev.clientY-palette.clientHeight/2}px`;
    palette.style.left = `${ev.clientX-x_diff}px`;
    palette.style.top = `${ev.clientY-y_diff}px`;
    palette.setAttribute("copied",'');
    palette.childNodes[1].removeAttribute('hidden')
    palette.style.resize = 'both'
}
========================================
<div id="palette" class="palette">
    <div>
        <img
        draggable="true"
        ondragstart="drag(event)"
        id="yellow"
        title="yellow"
        src="palette/yellow.png"
        />
    </div>
</div>
========================================
{&quot;videoId&quot;:&quot;14625&quot;,&quot;imgId&quot;:&quot;14625-157&quot;,&quot;thumb&quot;:&quot;frames/tiny/14625/14625-157.jpg&quot;,&quot;frameName&quot;:&quot;14625-157&quot;,&quot;frameNumber&quot;:&quot;157&quot;,&quot;keyframe&quot;:&quot;frames/14625/14625-157.png&quot;,&quot;score&quot;:3,&quot;videoUrl&quot;:&quot;videos/14625-medium.mp4&quot;,&quot;videoUrlPreview&quot;:&quot;videos/tiny/14625-tiny.mp4&quot;,&quot;rowIdx&quot;:3,&quot;colIdx&quot;:0}, event
{&quot;videoId&quot;:&quot;14625&quot;,&quot;imgId&quot;:&quot;14625-157&quot;,&quot;thumb&quot;:&quot;frames/tiny/14625/14625-157.jpg&quot;,&quot;frameName&quot;:&quot;14625-157&quot;,&quot;frameNumber&quot;:&quot;157&quot;,&quot;keyframe&quot;:&quot;frames/14625/14625-157.png&quot;,&quot;score&quot;:3,&quot;videoUrl&quot;:&quot;videos/14625-medium.mp4&quot;,&quot;videoUrlPreview&quot;:&quot;videos/tiny/14625-tiny.mp4&quot;,&quot;rowIdx&quot;:3,&quot;colIdx&quot;:0}
========================================
<html>
<head>
    <title>Item Details</title>
    <link href="{{ url_for('static', path='/styles.css') }}" rel="stylesheet">
</head>
<body>
    <h1><a href="{{ url_for('read_item', id=id) }}">Item ID: {{ id }}</a></h1>
</body>
</html>
=========================================

resource = [faiss.StandardGpuResources()]

import numpy as np
d = 64                           # dimension
nb = 1000000                      # database size
nq = 10000                       # nb of queries
np.random.seed(1234)             # make reproducible
xb = np.random.random((nb, d)).astype('float32')
xb[:, 0] += np.arange(nb) / 1000.
xq = np.random.random((nq, d)).astype('float32')
xq[:, 0] += np.arange(nq) / 1000.


index = faiss.IndexFlatL2(d) 

print(index.is_trained)
gindex = faiss.index_cpu_to_gpu_multiple_py(resource, index)
gindex.add(xb)
# gindex.add(xb)
print(index.ntotal)
k = 4                          # we want to see 4 nearest neighbors
D, I = index.search(xb[:5], k) # sanity check
print(I)

GD, GI = gindex.search(xb[:5], k)
print(GI)