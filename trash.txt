[person,man,woman,human_face,musical_instrument,sports_equipment,sports,skateboard,glasses,bicycle,motorcycle,car,truck,boat,parachute,airplane,bench,chair,sofa,building,umbrella,wine_glass,cup,dessert,cell_phone,television,laptop_computer,book,cat,dog,horse,bird,flower,tree]

musical_instrument(musical)
wine_glass(wineglass)
cell_phone(cellphone)
laptop_computer(laptop)
human_face.png (humanface.png)

black,blue,brown,green,grey,orange,pink,purple,red,white,yellow



============================================
<input type="number" name="num_clip_query" class="large-placeholder" placeholder="Number of CLIP neareset"
              value={{num_clip_query}} size="50" style="width: 50px; padding: 10px; 
                height: 100%; font-size: 20px;" id="num-clip-query" />
<input type="number" name="num_show_query" class="large-placeholder" placeholder="Number of show on Web"
            value={{num_show_query}} size="50" style="width: 50px; /*padding: 10px;
              height: 80%;*/ font-size: 20px; display: none;" id="num-show-query"/>
===========================================
VIDEO_FILE = DATA_PATH+'/video/L01_V001.mp4'
def generate_video_chunks():
    with open(VIDEO_FILE, "rb") as file_object:
        counter = 0
        while True:
            chunk = file_object.read(CHUNK_SIZE)
            if not chunk:
                print("End of chunks")
                break  # "abcdef"
            counter = counter + 1
            print("Chunk Counter", counter)
            yield chunk
@app.get("/test_video")
async def video_stream(request: Request,
            id: int|None = 12):
    "id: keyframe index"
    video = keyframes_mapping[id]['video']
    file_size = os.stat(VIDEO_FILE).st_size
    headers = {
        "content-type": "video/mp4",
        "accept-ranges": "bytes",
        "content-encoding": "identity",
        "content-length": str(file_size),
        "content-range": f"bytes 0-{file_size-1}/{file_size}",
    }
    return StreamingResponse(
        content=generate_video_chunks(),
        headers=headers,
        status_code=status.HTTP_206_PARTIAL_CONTENT,
        media_type="video/mp4",
    )
===========================================
@app.get("/videotest")
async def read_root(request: Request):
    return templates.TemplateResponse("videoconcac.htm", context={"request": request})
<!DOCTYPE html>
<html>
    <head>
        <title>FastAPI video streaming</title>
    </head>
    <body>
        <video width="1200" controls muted="muted">
            <source src="video" type="video/mp4" />
        </video>
    </body>
</html>
=====================================
<div class="hline column-span-11"></div>
==================================
for (let i = 0; i < num_keyframes; i++) {
        const dot = document.createElement('span');
        dot.className = 'dot';
        dot.onclick = () => {
            currentSlide(i+1);
        }
        document.querySelector('.gallery').appendChild(dot);
    }
    const items = document.querySelectorAll('.grid-item');
    for (let i = 0; i < items.length; i++) {
        items[i].innerHTML = video_keyframes_id[i];
    }
======================================
print(utils.ocr_bm25.get_sorted_idx("thuan phat",5))
for id in utils.ocr_bm25.get_sorted_idx("thuan phat",10):
    ocr_file = open(OCR_PATH)
    corpus  = json.load(ocr_file)
    print(corpus[id])
=======================================
function dropPalette(ev) {
    ev.preventDefault();
    // var data = ev.dataTransfer.getData("text");
    // const clone = document.getElementById(data);
    var palette = draggedItem;
    if (!draggedItem.hasAttribute("copied")){
        palette = draggedItem.cloneNode(true);
    }
    if (palette.className!="dragbox"){
        return;
    }
    palette.style.position = 'absolute';
    whiteboard.appendChild(palette);
    //palette.size wont update until append  
    // palette.style.left = `${ev.clientX-palette.clientWidth/2}px`;
    // palette.style.top = `${ev.clientY-palette.clientHeight/2}px`;
    palette.style.left = `${ev.clientX-x_diff}px`;
    palette.style.top = `${ev.clientY-y_diff}px`;
    palette.setAttribute("copied",'');
    palette.childNodes[1].removeAttribute('hidden')
    palette.style.resize = 'both'
}
========================================
<div id="palette" class="palette">
    <div>
        <img
        draggable="true"
        ondragstart="drag(event)"
        id="yellow"
        title="yellow"
        src="palette/yellow.png"
        />
    </div>
</div>
========================================
{&quot;videoId&quot;:&quot;14625&quot;,&quot;imgId&quot;:&quot;14625-157&quot;,&quot;thumb&quot;:&quot;frames/tiny/14625/14625-157.jpg&quot;,&quot;frameName&quot;:&quot;14625-157&quot;,&quot;frameNumber&quot;:&quot;157&quot;,&quot;keyframe&quot;:&quot;frames/14625/14625-157.png&quot;,&quot;score&quot;:3,&quot;videoUrl&quot;:&quot;videos/14625-medium.mp4&quot;,&quot;videoUrlPreview&quot;:&quot;videos/tiny/14625-tiny.mp4&quot;,&quot;rowIdx&quot;:3,&quot;colIdx&quot;:0}, event
{&quot;videoId&quot;:&quot;14625&quot;,&quot;imgId&quot;:&quot;14625-157&quot;,&quot;thumb&quot;:&quot;frames/tiny/14625/14625-157.jpg&quot;,&quot;frameName&quot;:&quot;14625-157&quot;,&quot;frameNumber&quot;:&quot;157&quot;,&quot;keyframe&quot;:&quot;frames/14625/14625-157.png&quot;,&quot;score&quot;:3,&quot;videoUrl&quot;:&quot;videos/14625-medium.mp4&quot;,&quot;videoUrlPreview&quot;:&quot;videos/tiny/14625-tiny.mp4&quot;,&quot;rowIdx&quot;:3,&quot;colIdx&quot;:0}
========================================
<html>
<head>
    <title>Item Details</title>
    <link href="{{ url_for('static', path='/styles.css') }}" rel="stylesheet">
</head>
<body>
    <h1><a href="{{ url_for('read_item', id=id) }}">Item ID: {{ id }}</a></h1>
</body>
</html>
=========================================

resource = [faiss.StandardGpuResources()]

import numpy as np
d = 64                           # dimension
nb = 1000000                      # database size
nq = 10000                       # nb of queries
np.random.seed(1234)             # make reproducible
xb = np.random.random((nb, d)).astype('float32')
xb[:, 0] += np.arange(nb) / 1000.
xq = np.random.random((nq, d)).astype('float32')
xq[:, 0] += np.arange(nq) / 1000.


index = faiss.IndexFlatL2(d) 

print(index.is_trained)
gindex = faiss.index_cpu_to_gpu_multiple_py(resource, index)
gindex.add(xb)
# gindex.add(xb)
print(index.ntotal)
k = 4                          # we want to see 4 nearest neighbors
D, I = index.search(xb[:5], k) # sanity check
print(I)

GD, GI = gindex.search(xb[:5], k)
print(GI)